#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function requireUncached(module) {
    delete require.cache[require.resolve(module)];
    return require(module);
}

var io = require('socket.io')(server);
var events = require('events');
var eventEmitter = new events.EventEmitter();

eventEmitter.on('logging', function (message) {
  io.emit('log_message', message);
});

var originConsoleLog = console.log;
console.log = function (data) {
  eventEmitter.emit('logging', data);
  originConsoleLog(data);
}

io.on('connection', function (socket) {
  console.log('a user is connected');


  socket.on('RestartApp', function () {
    console.log('Restart command recieved.');
  });
  socket.on('FirstFunction', function () {
    console.log('first method of project');
  });
  socket.on('SecondFunction', function () {
    console.log('second method of project');
    requireUncached('../nodeapp/main.js')

  });
});

/* io.sockets.on("connect",function(socket){
    socket.emit("Start_Chat");
    console.log("hi 2")
    socket.emit('message', "Welcome!")
    socket.on("msg",function(socket,data){
         console.log("test" + data);
         socket.emit('message', data);
    })
}) */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
requireUncached('../nodeapp/main.js');
